plugins {
    id 'application'
}

version '1.0-SNAPSHOT'

repositories {
    jcenter()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// since there's no code in the default src/test/java folder
// modify the target directory to src/main/java
sourceSets {
    test {
        java {
            srcDirs = ['src/main/java']
        }
    }
}

// if we don't have this setup
// by default all the test tasks would be executed automatically right after compiling
// but we want to decide our own tasks-executing orders
test {
    exclude '**/*'
}

dependencies {
    implementation 'org.apache.commons:commons-lang3:3.11'
    implementation 'commons-io:commons-io:2.6'
    implementation 'io.cucumber:cucumber-java:5.4.0'
    implementation 'io.cucumber:cucumber-junit:5.4.0'
}

// if we execute: gradle run
// the "run" task will execute the main method of mainClassName class
application {
    mainClassName = 'automation.preprocess.Preprocess'
}

// we don't have to explicitly call this task
// this task would be run automatically before compiling source files
//
// that is: this task is the first task being called when gradle runs
//
// e.g. if we execute: gradle run testGoogle testYahoo
// this "setupEnv" task would be run before "run", "testGoogle" and "testYahoo"
//
// so we can setup required parameters here.
// e.g. gradle -Pbrowser=Chrome -Penv=Production -Pmachine=local
task setupEnv(type: WriteProperties) {

    String browserVar = project.hasProperty('browser') ? browser : 'Chrome'
    String envVar = project.hasProperty('env') ? env : 'UAT'
    String machineVar = project.hasProperty('machine') ? machine : 'remote'

    println '==> Test Browser: ' + browserVar
    println '==> Test Environment: ' + envVar
    println '==> Test Machine: ' + machineVar

    def propertiesFilePath = 'src/main/resources/environment.properties'
    def propFile
    if (!file(propertiesFilePath).exists()) {
        propFile = new File(propertiesFilePath)
    }
    else {
        propFile = file(propertiesFilePath)
    }
    property('browser', browserVar)
    property('env', envVar)
    property('machine', machineVar)
    setOutputFile(propFile)
    writeProperties()

    println '==> Set Properties OK!'
}

// in this template, we will demonstrate how to
// let different cucumber test runners share the same feature file

task testGoogle(type: Test) {
    group = 'regression'
    testLogging.showStandardStreams = true
    ignoreFailures = true
    include '**/GoogleTestRunner.class'
}

task testYahoo(type: Test) {
    group = 'regression'
    testLogging.showStandardStreams = true
    ignoreFailures = true
    include '**/YahooTestRunner.class'
}

task testDuckDuckGo(type: Test) {
    group = 'regression'
    testLogging.showStandardStreams = true
    ignoreFailures = true
    include '**/DuckDuckGoTestRunner.class'
}

// archive test results
task copyTestResults(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = 'automation.postprocess.Postprocess'
}


